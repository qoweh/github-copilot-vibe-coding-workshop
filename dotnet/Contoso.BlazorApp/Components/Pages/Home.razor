@page "/"
@rendermode InteractiveServer
@using Contoso.BlazorApp.Components.Posts
@inject Services.PostApiService PostApi
@inject Services.AuthState Auth

<PageTitle>Home - Contoso Social</PageTitle>

<div class="container py-4">
    <h1 class="h4 mb-4">Contoso Outdoor Social</h1>
    @if(!Auth.IsAuthenticated)
    {
        <div class="alert alert-info">Enter a username to start posting.</div>
        <div class="input-group mb-3" style="max-width:320px;">
            <input class="form-control" placeholder="Username" @bind="_username" @bind:after="StateHasChanged" />
            <button class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(_username)" @onclick="Login">Login</button>
        </div>
    }
    else
    {
        <div class="mb-3 d-flex justify-content-between align-items-center">
            <div><strong>@Auth.CurrentUser!.Username</strong></div>
            <button class="btn btn-sm btn-outline-secondary" @onclick="Logout">Logout</button>
        </div>
        <button class="btn btn-primary mb-3" @onclick="OpenCreate">New Post</button>
        @if(_loading)
        {
            <div>Loading posts...</div>
        }
        else if(_posts.Count == 0)
        {
            <div class="text-muted">No posts yet.</div>
        }
        else
        {
            <div class="d-flex flex-column gap-3">
                @foreach(var p in _posts)
                {
                    <PostCard Post="p" OnPostUpdated="HandlePostUpdated" />
                }
            </div>
        }
    }
    <PostCreateModal @ref="_createModal" OnCreated="HandleCreated" />
</div>

@code {
    private List<PostApiService.PostDto> _posts = new();
    private bool _loading;
    private string _username = string.Empty;
    private PostCreateModal? _createModal;

    protected override async Task OnInitializedAsync()
    {
        if(Auth.IsAuthenticated)
        {
            await LoadPosts();
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            _loading = true;
            _posts = await PostApi.GetPostsAsync();
        }
        finally { _loading = false; }
    }

    private async Task Login()
    {
        if(string.IsNullOrWhiteSpace(_username)) return;
        await Auth.LoginAsync(_username.Trim());
        _username = string.Empty;
        await LoadPosts();
    }

    private void Logout()
    {
        Auth.Logout();
        _posts.Clear();
    }

    private void OpenCreate() => _createModal?.Open();

    private async Task HandleCreated(PostApiService.PostDto dto)
    {
        _posts.Insert(0, dto);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandlePostUpdated(PostApiService.PostDto updated)
    {
        var idx = _posts.FindIndex(p => p.id == updated.id);
        if(idx >=0) _posts[idx] = updated;
        await InvokeAsync(StateHasChanged);
    }
}
